generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String               @id @default(cuid())
  name                    String
  email                   String               @unique
  contactNumber           String
  country                 String
  state                   String
  password                String
  role                    UserRole             @default(USER)
  isActive                Boolean              @default(false)
  emailVerified           Boolean              @default(false)
  referralCode            String               @unique
  referredBy              String?
  walletAddress           String?
  totalTokens             Float                @default(0)
  stakedTokens            Float                @default(0)
  availableTokens         Float                @default(0)
  usdtBalance             Float                @default(0) // USDT balance for purchases
  totalEarnings           Float                @default(0)
  referralEarnings        Float                @default(0)
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  profilePicture          String?
  usdtWalletAddress       String?
  loginHistory            LoginHistory[]
  receivedMessages        Message[]            @relation("ReceivedMessages")
  sentMessages            Message[]            @relation("SentMessages")
  notifications           Notification[]
  profileUpdates          ProfileUpdate[]
  referredUserCommissions ReferralCommission[] @relation("ReferredUserCommissions")
  referrerCommissions     ReferralCommission[] @relation("ReferrerCommissions")
  stakingRecords          StakingRecord[]
  transactions            Transaction[]
  userSettings            UserSettings?
  referrer                User?                @relation("UserReferrals", fields: [referredBy], references: [referralCode])
  referrals               User[]               @relation("UserReferrals")
  withdrawalRequests      WithdrawalRequest[]
  withdrawalWallets       WithdrawalWallet[]

  @@index([referredBy], map: "users_referredBy_fkey")
  @@map("users")
}

model TokenPrice {
  id        String   @id @default(cuid())
  price     Float
  date      DateTime @default(now())
  createdAt DateTime @default(now())

  @@map("token_prices")
}

model StakingRecord {
  id            String   @id @default(cuid())
  userId        String
  amount        Float
  stakingPeriod Int      @default(3) // Staking period in years (3-10)
  startDate     DateTime @default(now())
  endDate       DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  apy           Float    @default(0)
  rewards       Float    @default(0)
  status        String   @default("ACTIVE")
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "staking_records_userId_fkey")
  @@map("staking_records")
}

model Transaction {
  id            String            @id @default(cuid())
  userId        String
  type          TransactionType
  amount        Float
  tokenAmount   Float
  pricePerToken Float
  status        TransactionStatus @default(PENDING)
  txHash        String?
  walletAddress String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  description   String?
  paymentMethod String?
  processingFee Float             @default(0)
  adminNotes    String?
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "transactions_userId_fkey")
  @@map("transactions")
}

model ReferralCommission {
  id                  String    @id @default(cuid())
  referrerId          String
  referredUserId      String
  amount              Float     // Commission amount in USDT
  tokenAmount         Float     // Commission amount in DIT tokens (for reference)
  pricePerToken       Float     // Token price at time of transaction
  commissionPercentage Float    // Commission percentage at time of transaction (e.g., 5.0 for 5%)
  status              String    @default("APPROVED") // APPROVED, REJECTED, PENDING
  isPaid              Boolean   @default(false)
  paidAt              DateTime?
  rejectedAt          DateTime?
  rejectedBy          String?
  rejectionReason     String?
  month               Int
  year                Int
  createdAt           DateTime  @default(now())
  referredUser        User      @relation("ReferredUserCommissions", fields: [referredUserId], references: [id], onDelete: Cascade)
  referrer            User      @relation("ReferrerCommissions", fields: [referrerId], references: [id], onDelete: Cascade)

  @@unique([referrerId, referredUserId, month, year], name: "referrer_referred_month_year")
  @@index([referredUserId], map: "referral_commissions_referredUserId_fkey")
  @@map("referral_commissions")
}

model CommissionSettings {
  id           String   @id @default(cuid())
  referralRate Float    @default(5)
  updatedBy    String
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())

  @@map("commission_settings")
}

model WithdrawalRequest {
  id            String           @id @default(cuid())
  userId        String
  amount        Float
  tokenAmount   Float
  network       String
  walletAddress String
  status        WithdrawalStatus @default(PENDING)
  requestDate   DateTime         @default(now())
  processedDate DateTime?
  lockPeriod    Int              @default(1095)
  canWithdraw   Boolean          @default(false)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "withdrawal_requests_userId_fkey")
  @@map("withdrawal_requests")
}

model Message {
  id          String      @id @default(cuid())
  senderId    String
  receiverId  String
  subject     String?
  content     String
  messageType MessageType @default(EMAIL)
  isRead      Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  receiver    User        @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  sender      User        @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([receiverId], map: "messages_receiverId_fkey")
  @@index([senderId], map: "messages_senderId_fkey")
  @@map("messages")
}

model LiveChat {
  id         String   @id @default(cuid())
  userId     String
  message    String
  isFromUser Boolean  @default(true)
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@map("live_chats")
}

model SystemSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  updatedAt   DateTime @updatedAt
  updatedBy   String?

  @@map("system_settings")
}

model TokenSupply {
  id              String   @id @default(cuid())
  totalSupply     Float    @default(50000000)
  tokensSold      Float    @default(0)
  tokensAvailable Float    @default(50000000)
  updatedBy       String
  updatedAt       DateTime @updatedAt
  createdAt       DateTime @default(now())

  @@map("token_supply")
}

model PasswordReset {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("password_resets")
}

model ProfileUpdate {
  id         String            @id @default(cuid())
  userId     String
  field      String
  oldValue   String?
  newValue   String?
  updateType ProfileUpdateType
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime          @default(now())
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "profile_updates_userId_fkey")
  @@map("profile_updates")
}

model UserSettings {
  id                 String   @id @default(cuid())
  userId             String   @unique
  emailNotifications Boolean  @default(true)
  smsNotifications   Boolean  @default(false)
  marketingEmails    Boolean  @default(true)
  darkMode           Boolean  @default(false)
  language           String   @default("en")
  timezone           String   @default("UTC")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model WithdrawalWallet {
  id         String    @id @default(cuid())
  userId     String
  address    String
  network    String
  label      String
  isActive   Boolean   @default(true)
  isVerified Boolean   @default(false)
  lastUsed   DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "withdrawal_wallets_userId_fkey")
  @@map("withdrawal_wallets")
}

model LoginHistory {
  id         String      @id @default(cuid())
  userId     String
  ipAddress  String
  userAgent  String
  status     LoginStatus @default(SUCCESS)
  location   String?
  deviceType String?
  browser    String?
  createdAt  DateTime    @default(now())
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "login_history_userId_fkey")
  @@map("login_history")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String?
  type      NotificationType
  title     String
  message   String
  icon      String?
  data      String?          @db.LongText
  isRead    Boolean          @default(false)
  isGlobal  Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User?            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "notifications_userId_fkey")
  @@map("notifications")
}

enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}

enum TransactionType {
  PURCHASE
  SALE
  STAKE
  UNSTAKE
  WITHDRAWAL
  DEPOSIT
  REFERRAL_COMMISSION
  REWARD
  REFERRAL
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum MessageType {
  EMAIL
  INTERNAL_MESSAGE
  NOTIFICATION
}

enum ProfileUpdateType {
  PROFILE_UPDATE
  PASSWORD_CHANGE
  PASSWORD_RESET
  EMAIL_UPDATE
  SETTINGS_UPDATE
}

enum LoginStatus {
  SUCCESS
  FAILED
  BLOCKED
}

enum NotificationType {
  SYSTEM
  TRANSACTION
  REFERRAL
  STAKING
  WITHDRAWAL
  DEPOSIT
  SECURITY
  PROFILE_UPDATE
  TOKEN_PURCHASE
  ADMIN_MESSAGE
}
